install.packages('devtools')
update.packages(checkBuilt = T, ask = F, type = "binary")
update.chjh
update.chjh
update.chjh()
plot(dbeta(shape1 = 1, shape2 = 1))
?dbeta
dbeta(seq(0, 1, .001), shape1 = 1, shape2 = 1)
plot(dbeta(seq(0, 1, .001), shape1 = 1, shape2 = 1))
for(beta in seq(.99, .9, -.01))
lines(dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta))
plot(dbeta(seq(0, 1, .001), shape1 = 1, shape2 = 1))
for(beta in seq(.99, .9, -.01))
lines(x = dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta))
plot(x = dbeta(seq(0, 1, .001), shape1 = 1, shape2 = 1))
for(beta in seq(.99, .9, -.01))
lines(x = dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta))
beta
dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta)
rbeta(n = 10, shape1 = 1, shape2 = .9)
rbeta(n = 10, shape1 = 1, shape2 = .9)
rbeta(n = 10, shape1 = 1, shape2 = .9)
rbeta(n = 10, shape1 = 1, shape2 = .9)
dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta)
density(dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta))
density(dbeta(seq(0, 1, .001), shape1 = 1, shape2 = beta))?dbeta
?dbeta
plot(x = c(.2, .5, .8), y = c(.09, .34, .69), type = 'o')
lines(x = c(.2, .5, .8), y = c(.14, .60, .94), type = 'o', pch =3)
lines(x = c(.2, .5, .8), y = c(.24, .88, .999), type = 'o', pch = 2)
plot(x = c(.2, .5, .8), y = c(.09, .34, .69), type = 'o', ylim = c(0,1), xlim = c(0,1))
lines(x = c(.2, .5, .8), y = c(.14, .60, .94), type = 'o', pch =3)
lines(x = c(.2, .5, .8), y = c(.24, .88, .999), type = 'o', pch = 2)
.2*200
sprintf("Dit %s is het getal één %s", 1, 2)
sprintf("Dit %s is het getal één %s", 1, c(1,2))
sprintf("Dit %s is het getal één %s", c(1, 2))
sprintf("Dit %s is het getal één %s", 1:100, 1:100)
expand.grid(1:10, 1:10)
expand.grid(1:5, 1:5)
expand.grid(1:5, 1:5, 1:5)
t.03875=abs(qt(.03875/2,df=38))
t.04    =abs(qt(.04/2,   df=38))
t.04875=abs(qt(.04875/2,df=38))
t.05    =abs(qt(.05/2,   df=38))
t.03875
t.04
t.04875
power=.9
library(pwr)
install.packages('pwr')
library(pwr)
??pwr
d=pwr.t.test(n=20,power=power)$d
ncp=d*sqrt(10)
ncp
library(devtools)
install_github('rasmusab/bayesian_first_aid')
#R CODE computing share of .04s to .05s with 90% power #Critical t-values for "strong reanalaysis"
t.03875=abs(qt(.03875/2,df=38))
t.04    =abs(qt(.04/2,   df=38))
t.04875=abs(qt(.04875/2,df=38))
t.05    =abs(qt(.05/2,   df=38))
qt(.03875/2,df=38)
abs(qt(.03875/2,df=38))
abs(qt(.04/2,   df=38))
?pwr.t.test
d=pwr.t.test(n=20,power=power)$d
d
sqrt(10)
#R CODE computing share of .04s to .05s with 90% power
#Critical t-values for "strong reanalaysis"
t.03875=abs(qt(.03875/2,df=38))
t.04    =abs(qt(.04/2,   df=38))
t.04875=abs(qt(.04875/2,df=38))
t.05    =abs(qt(.05/2,   df=38))
#Power of true studies
power=.9
#Effect size giving 90% power
library(pwr)
d=pwr.t.test(n=20,power=power)$d
#Noncentrality parameter for desired power
ncp=d*sqrt(10)
#Expected ratio of (.03875-.04) vs (.04875-.05)
#Probability that p<.04
prop1=1-pt(t.04,df=38,ncp=ncp)
#probability that p<.03875
prop2=1-pt(t.03875,df=38,ncp=ncp)
#Probability that p<.05
prop3=1-pt(t.05,df=38,ncp=ncp)
#probability that p<.04875
prop4=1-pt(t.04875,df=38,ncp=ncp)
#Share of p-values in bin .03875-.04
bin.04=prop1-prop2
bin.05=prop3-prop4
#Ratio of .04 to .05
bin.04/bin.05
library(devtools)
install.packages('devtools')
library(devtools)
install_github('stefano-meschiari/latex2exp')
library(latex2exp)
install_github('MicheleNuijten/statcheck')
library(devtools)
install_github('MicheleNuijten/statcheck')
install_github('stefano-meschiari/latex2exp')
library(latex2exp)
plot(1:10, 1:10, xlab = latex2exp('\\alpha\\times\\chi'))
plot(1:10, 1:10, xlab = latex2exp('$\\alpha\\times\\chi$'))
pchisq(q = 147.18, df = 7707)
install.packages('plotly')
library(devtools)
install_github('ropensci/plotly')
install.packages('ggplot2')
install_github('ropensci/plotly')
install.packages('Rcpp')
install.packages("Rcpp")
install_github('ropensci/plotly')
library(devtools)
install_github('ropensci/plotly')
help(signup)
help(signup, package = "plotly")
verify(username)
library(plotly)
verify()
plotly::verify
plotly::verify("chjh")
plotly
?plotly
install.packages('jsonlite')
library(jsonlite)
library(jsonlite)
# url with some information about project in Andalussia
url <- 'http://www.juntadeandalucia.es/export/drupaljda/ayudas.json'
# read url and convert to data.frame
document <- fromJSON(txt=url)
class(document)
document$documentacion
document$documentacion[1]
head(document$documentacion)
head(document$documentacion, 1)
class(document$documentacion)
class(document$documentacion$documentacion_item)
(document$documentacion$documentacion_item)[1]
300-6.18-7.5-1.93-6.46-13.7-26.81-4.99-60
duplicated(readClipboard())
x = readClipboard()
unique(x)
writeClipboard(unique(x))
.5/6
sqrt(.5/6)
setwd("~/Dropbox/projects/2015growth")
if(!require(XML)){install.packages('XML')}
files <- list.files('searches/abstracts')
files <- files[grep('.*.xml', files)]
x <- xmlParse('searches/abstracts/corrigenda_abstracts.xml')
x <- xmlToList(file)
x <- xmlParse('searches/abstracts/corrigenda_abstracts.xml')
x <- xmlToList(x)
file = files[1]
x <- xmlParse(paste0('searches/abstracts/', file))
x <- xmlToList(x)
head(x)
x$Source$BIBTEX_Abstract
x[[1]]
x[[1]]$BIBTEX_Abstract
dim(x)
length(x)
sample(x = 1 : length(x), replace = FALSE)
?sample
sample(x = 1 : length(x), size = 25, replace = FALSE)
index <- sort(sample(x = 1 : length(x), size = 25, replace = FALSE))
index
x[index]
length(x[index])
x[index]
write.csv2(x[index], 'test.csv')
unlist(x[index])
dim(unlist(x[index]))
x <- xmlParse(paste0('searches/abstracts/', file))
x <- xmlToDataFrame(x)
x$BIBTEX_Abstract
dim(x$BIBTEX_Abstract[index])
length(x$BIBTEX_Abstract[index])
length()
length(x)
